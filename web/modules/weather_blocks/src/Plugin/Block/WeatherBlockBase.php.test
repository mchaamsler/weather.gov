<?php

namespace Drupal\weather_blocks\Plugin\Block;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use PHPUnit\Framework\TestCase;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Tests for the WeatherBlockBaseTest block.
 */
final class WeatherBlockBaseTest extends TestCase {
  /**
   * A ready-to-use current conditions block object.
   *
   * We use this block for our tests because the WeatherBlockBase class is
   * abstract and cannot be directly instantiated. So, we'll test by proxy.
   *
   * @var currentConditionsBlock
   */
  protected $currentConditionsBlock;

  /**
   * A mock of the route object.
   *
   * @var routeMock
   */
  protected $routeMock;

  /**
   * A mocked WeatherData service object.
   *
   * @var weatherData
   *
   * This is injected into the current conditions block object being tested with
   * dependency injection.
   */
  protected $weatherData;

  /**
   * Common setup for all component tests.
   *
   * Creates a mock of a weather data service and injects it into a new current
   * conditions block object.
   */
  protected function setUp() : void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);

    $this->currentConditionsBlock = new CurrentConditionsBlock([], '', $definition, $this->weatherData, $this->routeMock);

  }

  /**
   * Test that the create() static method gives us back a block object.
   */
  public function testCreation() : void {
    $container = $this->createStub(ContainerInterface::class);
    $container->method('get')->will($this->returnCallback(function () {
      $args = func_get_args();
      switch ($args[0]) {
        case 'weather_data':
          return $this->weatherData;

        case 'current_route_match':
          return $this->routeMock;

        default:
          return NULL;
      }
    }));

    $actual = CurrentConditionsBlock::create($container, [], '', ["provider" => "weather_blocks"]);
    $this->assertEquals(CurrentConditionsBlock::class, $actual::class);
  }

  /**
   * Test that block cacheing is disabled.
   */
  public function testCache() : void {
    $expected = 0;
    $actual = $this->currentConditionsBlock->getCacheMaxAge();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block properly persists configuration changes.
   */
  public function testBlockSubmit() : void {
    $expected = "wfo,x,y";

    $formState = $this->createStub(FormStateInterface::class);
    $formState->method("getValue")->willReturn([
      "wfo" => "wfo",
      "gridX" => "x",
      "gridY" => "y",
    ]);

    $this->currentConditionsBlock->blockSubmit([], $formState);

    $actual = $this->currentConditionsBlock->getConfiguration()["grid"];

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the base block can get the relevant location from the URL.
   */
  public function testGetLocationFromRoute() : void {
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.grid");
    // Also configure the block. This will ensure that we test that the location
    // only comes from the URL and not configuration.
    $this->currentConditionsBlock->setConfigurationValue("grid", "wrong,wrong,wrong");

    $this->routeMock->method("getParameter")->will($this->returnValueMap([
      ["wfo", "wfo code"],
      ["gridX", "grid x"],
      ["gridY", "grid y"],
    ]));

    $expected = (object) [
      "grid" => (object) [
        "wfo" => "WFO CODE",
        "x" => "grid x",
        "y" => "grid y",
      ],
      "geometry" => null,
    ];

    $actual = $this->currentConditionsBlock->getLocation();

    $this->assertEquals($expected, $actual);

  }

  /**
   * Test that the base block gets location from configuration if not in URL.
   */
  public function testGetLocationFromConfiguration() : void {
    $this->routeMock->method('getRouteName')->willReturn("not grid");
    $this->currentConditionsBlock->setConfigurationValue("grid", "wiffo,ex,why");

    $expected = (object) [
      "grid" => (object) [
        "wfo" => "WIFFO",
        "x" => "ex",
        "y" => "why",
      ],
      "geometry" => null,
    ];

    $actual = $this->currentConditionsBlock->getLocation();

    $this->assertEquals($expected, $actual);

  }

}
