<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\weather_data\Service\UnitConversion;
use PHPUnit\Framework\TestCase;

final class UnitConversionTest extends TestCase
{
    /**
     * Test when the temperature value is null.
     */
    public function testNullTemperature(): void
    {
        $expected = null;
        $actual = UnitConversion::getTemperatureScalar(
            (object) ["value" => null],
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test converting from Fahrenheit to celsius.
     */
    public function testFahrenheitToCelsius(): void
    {
        $expected = 17;
        $temperature = (object) [
            "unitCode" => "wmoUnit:degF",
            "value" => 63,
        ];
        $actual = UnitConversion::getTemperatureScalar($temperature, false);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test converting from Fahrenheit to Fahrenheit.
     */
    public function testFahrenheitToFahrenheit(): void
    {
        $expected = 44;
        $temperature = (object) [
            "unitCode" => "wmoUnit:degF",
            "value" => 44,
        ];
        $actual = UnitConversion::getTemperatureScalar($temperature);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test converting from celsius to Fahrenheit.
     */
    public function testCelsiusToFahrenheit(): void
    {
        $expected = 63;
        $temperature = (object) [
            "unitCode" => "wmoUnit:degC",
            "value" => 17,
        ];
        $actual = UnitConversion::getTemperatureScalar($temperature);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test converting from Fahrenheit to Fahrenheit.
     */
    public function testCelsiusToCelsius(): void
    {
        $expected = 12;
        $temperature = (object) [
            "unitCode" => "wmoUnit:degC",
            "value" => 12,
        ];
        $actual = UnitConversion::getTemperatureScalar($temperature, false);

        $this->assertEquals($expected, $actual);
    }

    public function testDirectionOrdinal(): void
    {
        $scenarios = [
            [0, "north", "N"],
            [45, "northeast", "NE"],
            [90, "east", "E"],
            [135, "southeast", "SE"],
            [180, "south", "S"],
            [225, "southwest", "SW"],
            [270, "west", "W"],
            [315, "northwest", "NW"],
            [360, "north", "N"],
        ];

        foreach ($scenarios as $scenario) {
            $expected = (object) [
                "angle" => $scenario[0],
                "long" => $scenario[1],
                "short" => $scenario[2],
            ];

            $actual = UnitConversion::getDirectionOrdinal($scenario[0]);

            $this->assertEquals($expected, $actual);
        }
    }
}
